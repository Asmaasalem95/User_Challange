<?php

namespace Tests\Unit;

use App\Entities\ProviderX;
use App\Entities\ProviderY;
use App\Repositories\UserRepository;
use App\Transformers\ProviderXTransformer;
use App\Transformers\ProviderYTransformer;
use Illuminate\Support\Arr;
use Nahid\JsonQ\Jsonq;
use Tests\TestCase;

class FilterDataTest extends TestCase
{
    private $providerXMockery;
    private $providerYMockery;
    private $providerXTransformerMockery;
    private $providerYTransformerMockery;
    private $userRepositoryMockery;

    protected $repo;

    public function setUp(): void
    {

        $this->providerXMockery = new ProviderX();
        $this->providerYMockery = new ProviderY();
        $this->providerXTransformerMockery = new ProviderXTransformer();
        $this->providerYTransformerMockery = new ProviderYTransformer();
        $this->userRepositoryMockery = new UserRepository($this->providerXMockery, $this->providerYMockery, $this->providerXTransformerMockery, $this->providerYTransformerMockery);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    function can_convert_data_from_array_to_collection()
    {
        $data = [
            [
                "parentAmount" => 400,
                "Currency" => "AED",
                "parentEmail" => "parent4@parent.eu",
                "statusCode" => 1,
                "registerationDate" => "2019-09-07",
                "parentIdentification" => "d3dwwd70-1d25-11e3-8591-034165a3a613"
            ],
            [
                "parentAmount" => 200,
                "Currency" => "EUR",
                "parentEmail" => "parent5@parent.eu",
                "statusCode" => 1,
                "registerationDate" => "2018-10-30",
                "parentIdentification" => "d3d29d40-1d25-11e3-8591-034165a3a6133"
            ]
        ];

        $results = $this->userRepositoryMockery->convertDataToCollection($data);
        $type = $results instanceof Jsonq;
        $this->assertTrue($type);

    }

    /**
     * @test
     */
    function can_merge_data_from_providers()
    {

        $result = $this->userRepositoryMockery->mergeDataFromProviders();
        $providers = Arr::pluck($result, 'provider');
        $this->assertContains('DataProviderX', $providers);
        $this->assertContains('DataProviderY', $providers);

    }

}
